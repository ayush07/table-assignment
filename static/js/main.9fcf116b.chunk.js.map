{"version":3,"sources":["components/columns.js","components/ColumnFilter.js","components/Spinner.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["COLUMNS","Header","Footer","accessor","Filter","column","filterValue","setFilter","value","onChange","e","target","sticky","Cell","props","index","cell","map","film","key","console","log","length","icon","faUserCircle","size","className","style","fontSize","starship","vehicle","Spinner","textAlign","Table","columns","useMemo","useState","tableData","setData","loading","setLoading","defaultColumn","React","useEffect","a","axios","get","url","data","results","fetchData","useTable","initialState","pageIndex","pageSize","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","page","nextPage","previousPage","canPreviousPage","canNextPage","pageOptions","state","gotoPage","pageCount","setPageSize","headerGroups","prepareRow","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","row","getRowProps","cells","getCellProps","onClick","disabled","type","defaultValue","pageNumber","Number","width","App","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9fcf116b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\nimport { ColumnFilter } from './ColumnFilter';\nexport const COLUMNS = [\n  {\n    Header: 'Name',\n    Footer: 'Name',\n    accessor: 'name',\n    // sticky: 'left',\n    Filter: ColumnFilter,\n  },\n  {\n    Header: 'Gender',\n    Footer: 'Gender',\n    accessor: 'gender',\n    sticky: 'left',\n  },\n\n  {\n    Header: 'Birth Year',\n    Footer: 'Birth Year',\n    accessor: 'birth_year',\n  },\n  {\n    Header: 'Height',\n    Footer: 'Height',\n    accessor: 'height',\n  },\n  {\n    Header: 'Skin Color',\n    Footer: 'Skin Color',\n    accessor: 'skin_color',\n  },\n  {\n    Header: 'Hair Color',\n    Footer: 'Hair Color',\n    accessor: 'hair_color',\n  },\n  {\n    Header: 'Eye Color',\n    Footer: 'Eye Color',\n    accessor: 'eye_color',\n  },\n  {\n    Header: 'Mass',\n    Footer: 'Mass',\n    accessor: 'mass',\n  },\n  {\n    Header: 'Home World',\n    Footer: 'Home World',\n    accessor: 'homeworld',\n  },\n  {\n    Header: 'Films',\n    Footer: 'Films',\n\n    accessor: 'films',\n    Cell: (props, index) => {\n      return props.cell.value.map((film, index) => <li key={index}>{film}</li>);\n    },\n  },\n  {\n    Header: 'Species',\n    Footer: 'Species',\n    accessor: 'species',\n    Cell: (props) => {\n      console.log(props);\n      return props.cell.value.length === 0 ? (\n        <FontAwesomeIcon icon={faUserCircle} size='3x' />\n      ) : (\n        <i className='fa fa-android' style={{ fontSize: '44px' }}></i>\n      );\n    },\n  },\n  {\n    Header: 'Starships',\n    Footer: 'Starships',\n    accessor: 'starships',\n    Cell: (props) => {\n      return props.cell.value.map((starship, index) => (\n        <li key={index}>{starship}</li>\n      ));\n    },\n  },\n  {\n    Header: 'url',\n    Footer: 'url',\n    accessor: 'url',\n  },\n  {\n    Header: 'Vehicles',\n    Footer: 'Vehicles',\n    accessor: 'vehicles',\n    Cell: (props) => {\n      return props.cell.value.map((vehicle, index) => (\n        <li key={index}>{vehicle}</li>\n      ));\n    },\n  },\n];\n","import React from 'react'\n\nexport const ColumnFilter = ({ column }) => {\n  const { filterValue, setFilter } = column\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={filterValue || ''}\n        onChange={e => setFilter(e.target.value)}\n      />\n    </span>\n  )\n}\n","import React from 'react';\n\nconst Spinner = () => {\n  return (\n    <div\n      style={{\n        textAlign: 'center',\n      }}\n    >\n      <i className='fa fa-spinner fa-spin' style={{ fontSize: '100px' }} />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, usePagination, useFilters } from 'react-table';\nimport { COLUMNS } from './columns';\nimport './table.css';\nimport axios from 'axios';\nimport Spinner from './Spinner';\nexport const Table = () => {\n  const columns = useMemo(() => COLUMNS, []);\n  const [tableData, setData] = useState([]);\n  const [loading, setLoading] = useState('true');\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Filter: false,\n    }),\n    [],\n  );\n  useEffect(() => {\n    const fetchData = async () => {\n      const tableData = await axios.get(`${url}`);\n      setData(tableData.data.results);\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n  const data = useMemo(() => tableData, [tableData]);\n  const url = 'https://swapi.dev/api/people/';\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n\n    page,\n    nextPage,\n    previousPage,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    state,\n    gotoPage,\n    pageCount,\n    setPageSize,\n    headerGroups,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: { pageIndex: 0, pageSize: 3 },\n    },\n    useFilters,\n\n    useSortBy,\n\n    usePagination,\n  );\n  const { pageIndex, pageSize } = state;\n  if (!loading) {\n    return (\n      <>\n        <table {...getTableProps()}>\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n\n                    <div>\n                      {column.canFilter ? column.render('Filter') : null}\n                    </div>\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' ðŸ”½'\n                          : ' ðŸ”¼'\n                        : ''}\n                    </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {page.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div>\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n            {'<<'}\n          </button>{' '}\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n            Previous\n          </button>{' '}\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\n            Next\n          </button>{' '}\n          <button\n            onClick={() => gotoPage(pageCount - 1)}\n            disabled={!canNextPage}\n          >\n            {'>>'}\n          </button>{' '}\n          <span>\n            Page{' '}\n            <strong>\n              {pageIndex + 1} of {pageOptions.length}\n            </strong>{' '}\n          </span>\n          <span>\n            | Go to page:{' '}\n            <input\n              type='number'\n              defaultValue={pageIndex + 1}\n              onChange={(e) => {\n                const pageNumber = e.target.value\n                  ? Number(e.target.value) - 1\n                  : 0;\n                gotoPage(pageNumber);\n              }}\n              style={{ width: '50px' }}\n            />\n          </span>{' '}\n          <select\n            value={pageSize}\n            onChange={(e) => setPageSize(Number(e.target.value))}\n          >\n            {[3, 5, 10].map((pageSize) => (\n              <option key={pageSize} value={pageSize}>\n                Show {pageSize}\n              </option>\n            ))}\n          </select>\n        </div>\n      </>\n    );\n  } else {\n    return <Spinner />;\n  }\n};\n","import React from 'react';\nimport './App.css';\n// import { BasicTable } from './components/BasicTable';\n// import { FilteringTable } from './components/FiltertingTable';\n// import { PaginationTable } from './components/PaginationTable';\nimport { Table } from './components/Table';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className='App'>\n        {/* <BasicTable />\n      <FilteringTable /> */}\n        {/* <PaginationTable /> */}\n        <Table />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}